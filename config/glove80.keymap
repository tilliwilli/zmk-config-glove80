/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

&lt {
    quick-tap-ms = <175>;
    flavor = "balanced";
};

&mt {
    flavor = "balanced";
    quick-tap-ms = <175>;
};

&sk { quick-release; };

&sl { ignore-modifiers; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 57 58 59 60 61 62 63 73 74 75 76 77 78 79 56 72 55 52 53 54 70 71 69>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <57 73 74 56 72 55 52 53 54 70 71 69 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 64 65 66 67 68 69 70>;
            hold-trigger-on-release;
        };

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cmdhold: cmdhold {
            compatible = "zmk,behavior-hold-tap";
            label = "CMDHOLD";
            bindings = <&cmdtap>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        cmdsfthold: cmdsfthold {
            compatible = "zmk,behavior-hold-tap";
            label = "CMDSFTHOLD";
            bindings = <&cmdsfttap>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        hyperlt: hyperlt {
            compatible = "zmk,behavior-hold-tap";
            label = "HYPERLT";
            bindings = <&hypermo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        cmdtap: cmdtap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LGUI>;

            label = "CMDTAP";
        };

        cmdsfttap: cmdsfttap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LGUI &kp LSHFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT &kp LGUI>;

            label = "CMDSFTTAP";
        };

        hypermo: hypermo {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LGUI &kp LALT &kp LCTRL &kp LSHFT &macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>;

            label = "HYPERMO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&mt F11 F1  &mt F12 F2    &kp F3       &kp F4        &kp F5                                                                                          &kp F6       &kp F7        &kp F8       &kp F9        &kp F10
&kp GRAVE   &kp N1        &kp N2       &kp N3        &kp N4       &kp N5                                                                     &kp N6  &kp N7       &kp N8        &kp N9       &kp N0        &kp BSLH
&none       &kp Q         &kp W        &kp L         &kp D        &kp P                                                                      &kp J   &kp M        &kp O         &kp Y        &kp SQT       &none
&kp EQUAL   &hml LCTRL A  &hml LALT S  &hml LSHFT R  &hml LGUI T  &kp G                                                                      &kp F   &hmr RGUI N  &hmr RSHFT E  &hmr RALT I  &hmr RCTRL U  &kp MINUS
&none       &lt 3 X       &kp Z        &kp K         &kp C        &kp V   &sk LSHFT        &kp LBKT   &none    &none    &kp RBKT  &sk RSHFT  &kp B   &kp H        &comma_morph  &dot_morph   &lt 4 SLASH   &none
&magic 1 0  &kp HOME      &kp END      &kp LEFT      &kp RIGHT            &lt 4 BACKSPACE  &lt 1 ESC  &kp DEL  &kp TAB  &kp RET   &kp SPACE          &kp DOWN     &kp UP        &kp PG_DN    &kp PG_UP     &none
            >;
        };

        NumMeh {
            bindings = <
&none  &none                    &none                   &none                    &none                                                                                                        &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none            &kp C_BRIGHTNESS_INC
&none  &kp LC(LA(LG(N1)))       &kp LC(LA(LG(N2)))      &kp LC(LA(LG(N3)))       &kp LC(LA(LG(N4)))      &kp LC(LA(LG(N5)))                                                  &none            &none       &kp LPAR           &kp RPAR         &none            &kp C_BRIGHTNESS_DEC
&none  &kp LC(LA(LG(F12)))      &kp LC(LA(LG(W)))       &kp LC(LA(LG(L)))        &kp LC(LA(LG(D)))       &kp LC(LA(LG(P)))                                                   &none            &kp N7      &kp N8             &kp N9           &kp COLON        &none
&none  &mt LCTRL LC(LA(LG(A)))  &mt LALT LC(LA(LG(S)))  &mt LSHFT LC(LA(LG(R)))  &mt LGUI LC(LA(LG(T)))  &kp LC(LA(LG(G)))                                                   &kp KP_PLUS      &kp N4      &kp N5             &kp N6           &kp KP_SUBTRACT  &none
&none  &kp LC(LA(LG(X)))        &kp LC(LA(LG(Z)))       &kp LC(LA(LG(K)))        &kp LC(LA(LG(C)))       &kp LC(LA(LG(V)))   &trans  &trans  &trans  &trans  &trans  &trans  &kp KP_MULTIPLY  &kp N1      &kp N2             &kp N3           &kp KP_DIVIDE    &none
&none  &kp LG(LS(GRAVE))        &kp LG(GRAVE)           &none                    &none                                       &trans  &mo 1   &trans  &trans  &trans  &trans                   &kp N0      &kp COMMA          &kp DOT          &none            &none
            >;
        };

        Hyper {
            bindings = <
&trans  &trans   &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F12  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        Navigation_Left {
            bindings = <
&none  &none  &none     &none     &none                                                                          &none  &none  &none  &none  &none
&none  &none  &none     &none     &none      &none                                                        &none  &none  &none  &none  &none  &none
&none  &none  &kp BSPC  &kp UP    &kp DEL    &none                                                        &none  &none  &none  &none  &none  &none
&none  &none  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_UP                                                    &none  &none  &none  &none  &none  &none
&none  &mo 3  &kp HOME  &none     &kp END    &kp PG_DN  &none      &none    &none    &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none     &none     &none                 &kp SPACE  &kp RET  &kp TAB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        Navigation {
            bindings = <
&none  &none            &none           &none                   &none                                                                                                            &none     &none     &none      &none   &none
&none  &kp LG(N1)       &kp LG(N2)      &kp LG(NUMBER_3)        &kp LG(NUMBER_4)       &kp LG(NUMBER_5)                                                           &none          &none     &none     &none      &none   &none
&none  &kp LG(Q)        &kp LG(W)       &cmdhold L LC(LS(TAB))  &cmdhold D LC(TAB)     &cmdsfthold F LG(LS(G))                                                    &none          &kp BSPC  &kp UP    &kp DEL    &none   &none
&none  &mt LCTRL LG(A)  &mt LALT LG(S)  &mt LSHFT LG(R)         &mt LGUI LG(T)         &cmdhold F LG(G)                                                           &kp PG_UP      &kp LEFT  &kp DOWN  &kp RIGHT  &none   &none
&none  &kp LG(X)        &kp LG(Z)       &kp LG(K)               &kp LG(C)              &kp LG(V)                &none  &none  &none  &none    &none    &none      &kp PAGE_DOWN  &kp HOME  &none     &kp END    &mo 4   &none
&none  &none            &none           &kp LG(LEFT_BRACKET)    &kp LG(RIGHT_BRACKET)                           &mo 4  &none  &none  &kp TAB  &kp RET  &kp SPACE                 &trans    &trans    &trans     &trans  &none
            >;
        };
    };
};
